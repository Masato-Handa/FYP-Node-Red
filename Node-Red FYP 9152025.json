[
    {
        "id": "7065a400cffc6e01",
        "type": "tab",
        "label": "Final Year Project",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "58c66e2290f9b335",
        "type": "mqtt out",
        "z": "7065a400cffc6e01",
        "name": "HOME_DATA_EMQX",
        "topic": "HOME_DATA_EMQX",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d554261bb421c00a",
        "x": 1460,
        "y": 640,
        "wires": []
    },
    {
        "id": "9229d235fc69c133",
        "type": "mqtt in",
        "z": "7065a400cffc6e01",
        "name": "",
        "topic": "CONTROL/LIGHTS_EMQX",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d554261bb421c00a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 560,
        "y": 460,
        "wires": [
            [
                "ec3e615c9e20e083",
                "c1663b5cc67e0255"
            ]
        ]
    },
    {
        "id": "ec3e615c9e20e083",
        "type": "mqtt out",
        "z": "7065a400cffc6e01",
        "name": "",
        "topic": "CONTROL/LIGHTS_MOSQUITTO",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d1cd9df7cfcd7213",
        "x": 1060,
        "y": 460,
        "wires": []
    },
    {
        "id": "cd495ebdc44bd05a",
        "type": "debug",
        "z": "7065a400cffc6e01",
        "name": "Home Notification Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 620,
        "wires": []
    },
    {
        "id": "c1157a1355b2a099",
        "type": "mqtt in",
        "z": "7065a400cffc6e01",
        "name": "",
        "topic": "CONTROL/WATER_PUMP_EMQX",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d554261bb421c00a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 580,
        "y": 520,
        "wires": [
            [
                "13d3d361ccd56443",
                "f7c6d2a4eea30841"
            ]
        ]
    },
    {
        "id": "13d3d361ccd56443",
        "type": "mqtt out",
        "z": "7065a400cffc6e01",
        "name": "",
        "topic": "CONTROL/MANUAL/WATER_PUMP_MOSQUITTO",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d1cd9df7cfcd7213",
        "x": 1120,
        "y": 520,
        "wires": []
    },
    {
        "id": "db3689bf586ba84d",
        "type": "mqtt in",
        "z": "7065a400cffc6e01",
        "name": "",
        "topic": "CONTROL/FAN_EMQX",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d554261bb421c00a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 620,
        "y": 580,
        "wires": [
            [
                "db281a44f164e382",
                "84d6c1c50b34f30b"
            ]
        ]
    },
    {
        "id": "db281a44f164e382",
        "type": "mqtt out",
        "z": "7065a400cffc6e01",
        "name": "",
        "topic": "CONTROL/FAN_MOSQUITTO",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d1cd9df7cfcd7213",
        "x": 1050,
        "y": 580,
        "wires": []
    },
    {
        "id": "b29b0e97a78fec7a",
        "type": "mqtt in",
        "z": "7065a400cffc6e01",
        "name": "",
        "topic": "CONTROL/DOOR_EMQX",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d554261bb421c00a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 570,
        "y": 640,
        "wires": [
            [
                "04664bab0f77f4e2",
                "8972c18537357078"
            ]
        ]
    },
    {
        "id": "04664bab0f77f4e2",
        "type": "mqtt out",
        "z": "7065a400cffc6e01",
        "name": "",
        "topic": "CONTROL/DOOR_MOSQUITTO",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d1cd9df7cfcd7213",
        "x": 1060,
        "y": 640,
        "wires": []
    },
    {
        "id": "fe4526fa49c5eb30",
        "type": "debug",
        "z": "7065a400cffc6e01",
        "name": "Home JS Object",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 860,
        "wires": []
    },
    {
        "id": "3531e2c0b2913ce8",
        "type": "cbor",
        "z": "7065a400cffc6e01",
        "name": "Home CBOR",
        "property": "payload",
        "x": 870,
        "y": 940,
        "wires": [
            [
                "fe4526fa49c5eb30",
                "fecf0357953a7d16"
            ]
        ]
    },
    {
        "id": "96bd29146b7093bd",
        "type": "mqtt in",
        "z": "7065a400cffc6e01",
        "name": "SECURITY_DATA_MOSQUITTO",
        "topic": "SECURITY_DATA_MOSQUITTO",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "8c56dc3acab9ce1f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 610,
        "y": 1020,
        "wires": [
            [
                "1007bb1de8c3258b"
            ]
        ]
    },
    {
        "id": "1007bb1de8c3258b",
        "type": "cbor",
        "z": "7065a400cffc6e01",
        "name": "Security CBOR",
        "property": "payload",
        "x": 860,
        "y": 1020,
        "wires": [
            [
                "2f5b1b489bacca4f",
                "13d2819aa659129d"
            ]
        ]
    },
    {
        "id": "04f9cf8a9ff0c35c",
        "type": "mqtt out",
        "z": "7065a400cffc6e01",
        "name": "",
        "topic": "SECURITY_DATA_EMQX",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d554261bb421c00a",
        "x": 1470,
        "y": 1200,
        "wires": []
    },
    {
        "id": "be15ac9bdcef2b69",
        "type": "influxdb out",
        "z": "7065a400cffc6e01",
        "influxdb": "5d6e265c0611969a",
        "name": "Home InfluxDB",
        "measurement": "Home Data",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Masato",
        "bucket": "Rumaroad IoT Data",
        "x": 1440,
        "y": 700,
        "wires": []
    },
    {
        "id": "3ac1022a27c5182f",
        "type": "influxdb out",
        "z": "7065a400cffc6e01",
        "influxdb": "5d6e265c0611969a",
        "name": "Energy InfluxDB",
        "measurement": "Energy Data",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Masato",
        "bucket": "Rumaroad IoT Data",
        "x": 1440,
        "y": 860,
        "wires": []
    },
    {
        "id": "678fcc90ce723318",
        "type": "influxdb out",
        "z": "7065a400cffc6e01",
        "influxdb": "5d6e265c0611969a",
        "name": "Errors InfluxDB",
        "measurement": "Error Data",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Masato",
        "bucket": "Rumaroad IoT Data",
        "x": 1440,
        "y": 1060,
        "wires": []
    },
    {
        "id": "5530ac77071ed85a",
        "type": "debug",
        "z": "7065a400cffc6e01",
        "name": "Error Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 1000,
        "wires": []
    },
    {
        "id": "fecf0357953a7d16",
        "type": "function",
        "z": "7065a400cffc6e01",
        "name": "Home Validation",
        "func": "// Utility functions\nfunction isNumber(v) {\n    return typeof v === \"number\" && !isNaN(v) && isFinite(v);\n}\nfunction isBoolean(v) {\n    return typeof v === \"boolean\";\n}\nconst clone = (msg.__proto__ && typeof msg.__proto__.cloneMessage === 'function')\n    ? (m) => m.__proto__.cloneMessage(m)\n    : (m) => JSON.parse(JSON.stringify(m));\n\n// Payload extraction\nlet payload = msg.payload;\nif (typeof payload !== \"object\" || Array.isArray(payload) || payload === null) {\n    return [null, { payload: \"Invalid payload format\", error: true }, null, null];\n}\n\n// Schema definition\nconst schema = {\n    airTemperature: { type: \"number\", required: true, range: [-50, 100] },\n    humidity: { type: \"number\", required: true, range: [0, 100] },\n    waterTemperature: { type: \"number\", required: true, range: [0, 50] },\n    carbonMonoxide: { type: \"number\", required: true, range: [0, 1000] },\n    flame: { type: \"boolean\", required: true },\n    batteryVoltage: { type: \"number\", required: true, range: [0, 5] },\n    batteryPercentage: { type: \"number\", required: true, range: [0, 100] },\n    solarVoltage: { type: \"number\", required: true, range: [0, 24] },\n    solarCurrent: { type: \"number\", required: true, range: [0, 10] },\n    latitude: { type: \"number\", required: true, range: [-90, 90] },\n    longitude: { type: \"number\", required: true, range: [-180, 180] }\n};\n\n// Validation\nlet errors = [];\nlet cleaned = {};\nfor (let key in schema) {\n    let rules = schema[key];\n    let val = payload[key];\n    if (val === undefined) {\n        if (rules.required) errors.push(key + \" is required\");\n        continue;\n    }\n    if (rules.type === \"number\") {\n        if (typeof val === \"string\" && val.trim() !== \"\") val = Number(val);\n        if (!isNumber(val)) {\n            errors.push(key + \" must be a number\");\n            continue;\n        }\n        if (rules.range && (val < rules.range[0] || val > rules.range[1])) {\n            errors.push(key + \" out of range\");\n            continue;\n        }\n    } else if (rules.type === \"boolean\") {\n        if (typeof val === \"string\") {\n            if (val.toLowerCase() === \"true\") val = true;\n            else if (val.toLowerCase() === \"false\") val = false;\n        }\n        if (!isBoolean(val)) {\n            errors.push(key + \" must be boolean\");\n            continue;\n        }\n    }\n    cleaned[key] = val;\n}\n\n// Prepare validation output\nif (errors.length > 0) {\n    return [null, { payload: errors, error: true }, null, null];\n}\n\n// Split data\nlet envData = {\n    airTemperature: cleaned.airTemperature,\n    humidity: cleaned.humidity,\n    carbonMonoxide: cleaned.carbonMonoxide,\n    flame: cleaned.flame,\n    waterTemperature: cleaned.waterTemperature,\n    latitude: cleaned.latitude,\n    longitude: cleaned.longitude\n};\n\nlet energyData = {\n    batteryVoltage: cleaned.batteryVoltage,\n    batteryPercentage: cleaned.batteryPercentage,\n    solarVoltage: cleaned.solarVoltage,\n    solarCurrent: cleaned.solarCurrent\n};\n\n// Output messages\nlet outEnvDB = { payload: envData, validation: { status: \"ok\", timestamp: new Date().toISOString(), schemaVersion: 1 } };\nlet outEnergyDB = { payload: energyData, validation: { status: \"ok\", timestamp: new Date().toISOString(), schemaVersion: 1 } };\nlet outFull = { payload: cleaned, validation: { status: \"ok\", timestamp: new Date().toISOString(), schemaVersion: 1 } };\n\nreturn [outEnvDB, null, outEnergyDB, outFull];\n",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 940,
        "wires": [
            [
                "be15ac9bdcef2b69",
                "c0e2994e2fae4dfb",
                "eb356d87a943239a"
            ],
            [
                "678fcc90ce723318",
                "5530ac77071ed85a"
            ],
            [
                "3ac1022a27c5182f",
                "2b63b4932a5b0ad8"
            ],
            [
                "58c66e2290f9b335"
            ]
        ]
    },
    {
        "id": "cc3540247776ab8f",
        "type": "mqtt out",
        "z": "7065a400cffc6e01",
        "name": "",
        "topic": "CONTROL/AUTOMATION/WATER_PUMP_MOSQUITTO",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d1cd9df7cfcd7213",
        "x": 1890,
        "y": 800,
        "wires": []
    },
    {
        "id": "8295516767209644",
        "type": "mqtt out",
        "z": "7065a400cffc6e01",
        "name": "",
        "topic": "CONTROL/DOOR_MOSQUITTO",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d1cd9df7cfcd7213",
        "x": 1820,
        "y": 680,
        "wires": []
    },
    {
        "id": "c0e2994e2fae4dfb",
        "type": "function",
        "z": "7065a400cffc6e01",
        "name": "Send Notification",
        "func": "\n// Low water temperature + flame alert + pump control\nconst temperature = Number(msg?.payload?.waterTemperature);\nconst flame = msg?.payload?.flame;\n\n// Validate temperature\nif (!Number.isFinite(temperature)) {\n    node.warn(\"Invalid or missing waterTemperature in payload\");\n    return [null, null, null]; \n}\n\n// Output 1: Temp Notification\n// Output 2: Flame Notification\n// Output 3: Door MQTT\n// Output 4: Pump MQTT\n\nlet tempNotif = null;\nlet flameNotif = null;\nlet doorMQTT = null;\nlet waterPumpMQTT = null;\n\nif (temperature < 18) {\n    tempNotif = {\n        payload: {\n            title: \"Low Water Temperature Alert\",\n            message: \"Water temperature reaching freezing (\" + temperature.toFixed(1) + \"°C)\",\n            timestamp: new Date().toISOString()\n        }\n    };\n    waterPumpMQTT = { topic: \"CONTROL/WATER_PUMP\", payload: \"ON\" };\n}\n\nif (flame === true) {\n    flameNotif = {\n        payload: {\n            title: \"Flame Alert\",\n            message: \"Flame detected near the system!\",\n            timestamp: new Date().toISOString()\n        }\n    };\n    doorMQTT = { topic: \"CONTROL/DOOR\", payload: \"ON\" };\n}\n\nreturn [tempNotif, flameNotif, doorMQTT, waterPumpMQTT];\n",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 780,
        "wires": [
            [
                "cd495ebdc44bd05a",
                "5ac21408e3162380"
            ],
            [
                "6e929f4fe36f1efa"
            ],
            [
                "8295516767209644",
                "8da4a954e60b6b4a"
            ],
            [
                "cc3540247776ab8f",
                "f0118d2eb4c360aa"
            ]
        ]
    },
    {
        "id": "2f5b1b489bacca4f",
        "type": "function",
        "z": "7065a400cffc6e01",
        "name": "Security Validation",
        "func": "// A simple utility to clone the message object.\nconst clone = (RED && RED.util && RED.util.cloneMessage)\n  ? RED.util.cloneMessage\n  : (o) => JSON.parse(JSON.stringify(o));\n\nlet payload = msg.payload;\n\n// ✅ Handle case where payload is an object like { pirData: true }\nif (typeof payload === 'object' && payload !== null && 'pirData' in payload) {\n  payload = payload.pirData;\n}\n\nlet isValid = false;\nlet coercedValue;\n\n// Handle different potential input types for a boolean value.\nif (typeof payload === 'boolean') {\n  isValid = true;\n  coercedValue = payload;\n} else if (typeof payload === 'string') {\n  const lowerCasePayload = payload.trim().toLowerCase();\n  if (lowerCasePayload === 'true' || lowerCasePayload === '1') {\n    isValid = true;\n    coercedValue = true;\n  } else if (lowerCasePayload === 'false' || lowerCasePayload === '0') {\n    isValid = true;\n    coercedValue = false;\n  }\n} else if (typeof payload === 'number') {\n  if (payload === 1) {\n    isValid = true;\n    coercedValue = true;\n  } else if (payload === 0) {\n    isValid = true;\n    coercedValue = false;\n  }\n}\n\n// If the validation and coercion were successful, prepare the output messages.\nif (isValid) {\n  const outValidReading = clone(msg);\n  outValidReading.topic = \"valid_reading\";\n  outValidReading.payload = coercedValue;\n  outValidReading.validation = { ok: true, at: new Date().toISOString(), schema: \"pir:v1\" };\n\n  return [outValidReading, null];\n} else {\n  const errMsg = {\n    topic: \"validation_error\",\n    payload: {\n      originalData: msg.payload,\n      error: `Invalid PIR sensor reading: expected a boolean, \"true\"/\"false\", 1/0.`,\n      receivedType: typeof msg.payload,\n      timestamp: new Date().toISOString()\n    }\n  };\n  node.warn(errMsg.payload.error);\n\n  return [null, errMsg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1020,
        "wires": [
            [
                "04f9cf8a9ff0c35c",
                "bb4332990a34b937"
            ],
            [
                "678fcc90ce723318",
                "5530ac77071ed85a"
            ]
        ]
    },
    {
        "id": "13d2819aa659129d",
        "type": "debug",
        "z": "7065a400cffc6e01",
        "name": "Security JS Object",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1080,
        "wires": []
    },
    {
        "id": "bb4332990a34b937",
        "type": "function",
        "z": "7065a400cffc6e01",
        "name": "Send Notification",
        "func": "const payload = msg.payload;\n\n// Check if the payload is a valid boolean for motion detection.\nif (typeof payload === 'boolean' && payload === true) {\n    // If motion is detected, create a notification message.\n    const notification = {\n        payload: {\n            title: \"Security Alert: Motion Detected\",\n            message: \"movement presence detected by PIR sensor!\",\n            timestamp: new Date().toISOString()\n        }\n    };\n    \n    // Return the notification message.\n    return [notification];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 1140,
        "wires": [
            [
                "85df4f2a8270a90f",
                "a548fdd86d63a3bb"
            ]
        ]
    },
    {
        "id": "85df4f2a8270a90f",
        "type": "debug",
        "z": "7065a400cffc6e01",
        "name": "Security Node Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 1100,
        "wires": []
    },
    {
        "id": "6e929f4fe36f1efa",
        "type": "http request",
        "z": "7065a400cffc6e01",
        "name": "Temperature Notification Endpoint",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://rumaroad-fastapi-env.eba-vspahmpq.us-east-1.elasticbeanstalk.com/notifications/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "5ac21408e3162380",
        "type": "http request",
        "z": "7065a400cffc6e01",
        "name": "Flame Notification Endpoint",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://rumaroad-fastapi-env.eba-vspahmpq.us-east-1.elasticbeanstalk.com/notifications/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1800,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "dd1381bd69bc66b7",
        "type": "inject",
        "z": "7065a400cffc6e01",
        "name": "Notification Test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"title\":\"Test Notification\",\"message\":\"This is a test from Node-RED\",\"timestamp\":\"2025-08-22T19:30:00Z\"}",
        "payloadType": "json",
        "x": 1460,
        "y": 500,
        "wires": [
            [
                "6e929f4fe36f1efa",
                "3a96f2444c952465"
            ]
        ]
    },
    {
        "id": "3a96f2444c952465",
        "type": "debug",
        "z": "7065a400cffc6e01",
        "name": "Notification Test Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 560,
        "wires": []
    },
    {
        "id": "a548fdd86d63a3bb",
        "type": "http request",
        "z": "7065a400cffc6e01",
        "name": "PIR Notification Endpoint",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://rumaroad-fastapi-env.eba-vspahmpq.us-east-1.elasticbeanstalk.com/notifications/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1790,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "f7c6d2a4eea30841",
        "type": "debug",
        "z": "7065a400cffc6e01",
        "name": "EMQX WATER PUMP DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 400,
        "wires": []
    },
    {
        "id": "c1663b5cc67e0255",
        "type": "debug",
        "z": "7065a400cffc6e01",
        "name": "EMQX LIGHT CONTROL DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 340,
        "wires": []
    },
    {
        "id": "84d6c1c50b34f30b",
        "type": "debug",
        "z": "7065a400cffc6e01",
        "name": "EMQX FAN CONTROL  DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 700,
        "wires": []
    },
    {
        "id": "8972c18537357078",
        "type": "debug",
        "z": "7065a400cffc6e01",
        "name": "EMQX DOOR CONTROL DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 760,
        "wires": []
    },
    {
        "id": "5cfd3322243c5494",
        "type": "mqtt in",
        "z": "7065a400cffc6e01",
        "name": "",
        "topic": "HOME_DATA_MOSQUITTO",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d1cd9df7cfcd7213",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 620,
        "y": 940,
        "wires": [
            [
                "3531e2c0b2913ce8"
            ]
        ]
    },
    {
        "id": "bc133ca74692d862",
        "type": "inject",
        "z": "7065a400cffc6e01",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 880,
        "y": 880,
        "wires": [
            [
                "fecf0357953a7d16"
            ]
        ]
    },
    {
        "id": "eb356d87a943239a",
        "type": "debug",
        "z": "7065a400cffc6e01",
        "name": "Home Influx Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 580,
        "wires": []
    },
    {
        "id": "2b63b4932a5b0ad8",
        "type": "debug",
        "z": "7065a400cffc6e01",
        "name": "Energy Influx Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 920,
        "wires": []
    },
    {
        "id": "8da4a954e60b6b4a",
        "type": "debug",
        "z": "7065a400cffc6e01",
        "name": "MOSQUITTO DOOR CONTROL DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1840,
        "y": 740,
        "wires": []
    },
    {
        "id": "f0118d2eb4c360aa",
        "type": "debug",
        "z": "7065a400cffc6e01",
        "name": "MOSQUITTO WATER PUMP DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 860,
        "wires": []
    },
    {
        "id": "d554261bb421c00a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.emqx.io",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "d1cd9df7cfcd7213",
        "type": "mqtt-broker",
        "name": "RPI ",
        "broker": "192.168.100.140",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8c56dc3acab9ce1f",
        "type": "mqtt-broker",
        "name": "Mosquitto",
        "broker": "localhost",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5d6e265c0611969a",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB Cloud",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://us-east-1-1.aws.cloud2.influxdata.com/",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "fd94fe341887ef95",
        "type": "global-config",
        "env": [],
        "modules": {
            "node-red-node-cbor": "1.0.2",
            "node-red-contrib-influxdb": "0.7.0"
        }
    }
]