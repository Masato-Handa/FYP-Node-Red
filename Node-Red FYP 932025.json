[
    {
        "id": "6fcc93558d7a5c77",
        "type": "tab",
        "label": "Final Year Project",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ae8e3c29a3b2c4ee",
        "type": "mqtt out",
        "z": "6fcc93558d7a5c77",
        "name": "HOME_DATA_EMQX",
        "topic": "HOME_DATA_EMQX",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d554261bb421c00a",
        "x": 1460,
        "y": 640,
        "wires": []
    },
    {
        "id": "dae66f1de2ee3616",
        "type": "mqtt in",
        "z": "6fcc93558d7a5c77",
        "name": "",
        "topic": "CONTROL/LIGHTS_EMQX",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d554261bb421c00a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 560,
        "y": 340,
        "wires": [
            [
                "dcd185efba379163",
                "3499fb5ff280ddd7"
            ]
        ]
    },
    {
        "id": "dcd185efba379163",
        "type": "mqtt out",
        "z": "6fcc93558d7a5c77",
        "name": "",
        "topic": "CONTROL/LIGHTS_MOSQUITTO",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8c56dc3acab9ce1f",
        "x": 1060,
        "y": 340,
        "wires": []
    },
    {
        "id": "f6326688912457ec",
        "type": "debug",
        "z": "6fcc93558d7a5c77",
        "name": "Home Notification Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 700,
        "wires": []
    },
    {
        "id": "555b5acb223f3842",
        "type": "mqtt in",
        "z": "6fcc93558d7a5c77",
        "name": "",
        "topic": "CONTROL/WATER_PUMP_EMQX",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d554261bb421c00a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 580,
        "y": 400,
        "wires": [
            [
                "7a7cae208737a375",
                "5aa1fc542901829d"
            ]
        ]
    },
    {
        "id": "7a7cae208737a375",
        "type": "mqtt out",
        "z": "6fcc93558d7a5c77",
        "name": "",
        "topic": "CONTROL/WATER_PUMP_MOSQUITTO",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8c56dc3acab9ce1f",
        "x": 1080,
        "y": 400,
        "wires": []
    },
    {
        "id": "9e8cf87b479018bd",
        "type": "mqtt in",
        "z": "6fcc93558d7a5c77",
        "name": "",
        "topic": "CONTROL/FAN_EMQX",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d554261bb421c00a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 620,
        "y": 460,
        "wires": [
            [
                "e98e8580923ca4e0",
                "84082cf87c4b2ed6"
            ]
        ]
    },
    {
        "id": "e98e8580923ca4e0",
        "type": "mqtt out",
        "z": "6fcc93558d7a5c77",
        "name": "",
        "topic": "CONTROL/FAN_MOSQUITTO",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8c56dc3acab9ce1f",
        "x": 1050,
        "y": 460,
        "wires": []
    },
    {
        "id": "83da45ebc969d297",
        "type": "mqtt in",
        "z": "6fcc93558d7a5c77",
        "name": "",
        "topic": "CONTROL/DOOR_EMQX",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d554261bb421c00a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 570,
        "y": 520,
        "wires": [
            [
                "0f8e93610488930b",
                "835c70ebb6371952"
            ]
        ]
    },
    {
        "id": "0f8e93610488930b",
        "type": "mqtt out",
        "z": "6fcc93558d7a5c77",
        "name": "",
        "topic": "CONTROL/DOOR_MOSQUITTO",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8c56dc3acab9ce1f",
        "x": 1060,
        "y": 520,
        "wires": []
    },
    {
        "id": "1e427d8a0f329d27",
        "type": "debug",
        "z": "6fcc93558d7a5c77",
        "name": "Home JS Object",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 760,
        "wires": []
    },
    {
        "id": "a540e0a1349dadf7",
        "type": "cbor",
        "z": "6fcc93558d7a5c77",
        "name": "Home CBOR",
        "property": "payload",
        "x": 870,
        "y": 840,
        "wires": [
            [
                "1e427d8a0f329d27",
                "16f229859378c5a5"
            ]
        ]
    },
    {
        "id": "3e56b12956630f01",
        "type": "mqtt in",
        "z": "6fcc93558d7a5c77",
        "name": "SECURITY_DATA_MOSQUITO",
        "topic": "SECURITY_DATA_MOSQUITO",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "8c56dc3acab9ce1f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 610,
        "y": 920,
        "wires": [
            [
                "5bbf9424e034daf9"
            ]
        ]
    },
    {
        "id": "5bbf9424e034daf9",
        "type": "cbor",
        "z": "6fcc93558d7a5c77",
        "name": "Security CBOR",
        "property": "payload",
        "x": 860,
        "y": 920,
        "wires": [
            [
                "61c5621e2d1d96a7",
                "dfd62f96a85b1075"
            ]
        ]
    },
    {
        "id": "b02149ab14b3fa6a",
        "type": "mqtt out",
        "z": "6fcc93558d7a5c77",
        "name": "",
        "topic": "SECURITY_DATA_EMQX",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d554261bb421c00a",
        "x": 1470,
        "y": 1140,
        "wires": []
    },
    {
        "id": "4c0d601a2c9ddd14",
        "type": "influxdb out",
        "z": "6fcc93558d7a5c77",
        "influxdb": "5d6e265c0611969a",
        "name": "Home InfluxDB",
        "measurement": "Home Data",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Masato",
        "bucket": "Rumaroad IoT Data",
        "x": 1440,
        "y": 700,
        "wires": []
    },
    {
        "id": "e20c698685c971d2",
        "type": "influxdb out",
        "z": "6fcc93558d7a5c77",
        "influxdb": "5d6e265c0611969a",
        "name": "Energy InfluxDB",
        "measurement": "Energy Data",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Masato",
        "bucket": "Rumaroad IoT Data",
        "x": 1440,
        "y": 860,
        "wires": []
    },
    {
        "id": "0d15bead7d26e3a0",
        "type": "influxdb out",
        "z": "6fcc93558d7a5c77",
        "influxdb": "5d6e265c0611969a",
        "name": "Errors InfluxDB",
        "measurement": "Error Data",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Masato",
        "bucket": "Rumaroad IoT Data",
        "x": 1440,
        "y": 1000,
        "wires": []
    },
    {
        "id": "9c99de15c0c09add",
        "type": "debug",
        "z": "6fcc93558d7a5c77",
        "name": "Error Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 940,
        "wires": []
    },
    {
        "id": "16f229859378c5a5",
        "type": "function",
        "z": "6fcc93558d7a5c77",
        "name": "Home Validation",
        "func": "// Three outputs: [ valid_env , validation_error , energy_data ]\nconst isNumber = v => typeof v === 'number' && Number.isFinite(v);\nconst isBoolean = v => typeof v === 'boolean';\n\nconst clone = (RED && RED.util && RED.util.cloneMessage)\n  ? RED.util.cloneMessage\n  : (o) => JSON.parse(JSON.stringify(o));\n\nconst payload = msg.payload;\n\n// Top-level checks\nif (!payload || typeof payload !== 'object' || Array.isArray(payload)) {\n  const errMsg = {\n    topic: \"validation_error\",\n    payload: {\n      error: \"Invalid payload: must be a non-array object\",\n      receivedType: Array.isArray(payload) ? \"array\" : typeof payload,\n      timestamp: new Date().toISOString()\n    }\n  };\n  node.warn(errMsg.payload.error);\n  return [null, errMsg, null];\n}\n\n// Schema\nconst schema = {\n  airTemperature:   { type: 'number', required: true,  range: [-50, 100] },\n  humidity:         { type: 'number', required: true,  range: [0, 100] },\n  carbonMonoxide:   { type: 'number', required: true,  range: [0, 1e6] }, // ppm\n  flame:            { type: 'boolean', required: true },\n  waterTemperature: { type: 'number', required: true,  range: [-20, 100] },\n  batteryVoltage:   { type: 'number', required: true,  range: [3.0, 4.2] }, // Li-ion safe range\n  batteryPercentage:{ type: 'number', required: true,  range: [0, 100] },\n  solarVoltage:     { type: 'number', required: true,  range: [0, 25] },   // depends on panel\n  solarCurrent:     { type: 'number', required: true,  range: [-1, 5000] }, // mA, adjust if needed\n  latitude:         { type: 'number', required: true,  range: [-90, 90] },\n  longitude:        { type: 'number', required: true,  range: [-180, 180] }\n};\n\nconst errors = [];\nconst cleaned = {};\n\n// Validate & coerce\nfor (const [key, def] of Object.entries(schema)) {\n  let v = payload[key];\n\n  if (def.required && (v === undefined || v === null)) {\n    errors.push(`Missing required field: ${key}`);\n    continue;\n  }\n  if (v === undefined) continue; // optional & absent\n\n  // Coerce wire formats\n  if (def.type === 'number' && typeof v === 'string' && v.trim() !== '') v = Number(v);\n  if (def.type === 'boolean' && typeof v === 'string') v = (v === 'true' || v === '1');\n  if (def.type === 'boolean' && typeof v === 'number') v = v !== 0;\n\n  // Type check\n  const badType = (def.type === 'number') ? !isNumber(v)\n                 : (def.type === 'boolean') ? !isBoolean(v)\n                 : (typeof v !== def.type);\n  if (badType) {\n    errors.push(`Field '${key}' has incorrect type: expected ${def.type}`);\n    continue;\n  }\n\n  // Range check\n  if (def.range && def.type === 'number') {\n    const [min, max] = def.range;\n    if (v < min || v > max) {\n      errors.push(`Field '${key}' out of range: ${v} not in [${min}, ${max}]`);\n      continue;\n    }\n  }\n\n  cleaned[key] = v;\n}\n\nif (errors.length) {\n  const errMsg = {\n    topic: \"validation_error\",\n    payload: {\n      originalData: payload,\n      errors,\n      timestamp: new Date().toISOString()\n    }\n  };\n  node.warn(`Data validation failed: ${errors.join('; ')}`);\n  return [null, errMsg, null];\n}\n\n// Split into environmental + energy data\nconst energyKeys = [\"batteryVoltage\", \"batteryPercentage\", \"solarVoltage\", \"solarCurrent\"];\nconst energyData = {};\nconst envData = {};\n\nfor (const [k, v] of Object.entries(cleaned)) {\n  if (energyKeys.includes(k)) {\n    energyData[k] = v;\n  } else {\n    envData[k] = v;\n  }\n}\n\n// Output 1 → environmental & GPS\nconst outEnvDB = clone(msg);\noutEnvDB.payload = envData;\noutEnvDB.validation = { ok: true, at: new Date().toISOString(), schema: \"home:v1\" };\n\n// Output 3 → energy data\nconst outEnergyDB = clone(msg);\noutEnergyDB.payload = energyData;\noutEnergyDB.validation = { ok: true, at: new Date().toISOString(), schema: \"energy:v1\" };\n\n// Output 4 → full validated payload\nconst outFull = clone(msg);\noutFull.payload = cleaned;\noutFull.validation = { ok: true, at: new Date().toISOString(), schema: \"full:v1\" };\n\nreturn [outEnvDB, null, outEnergyDB,outFull];\n",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 840,
        "wires": [
            [
                "4c0d601a2c9ddd14",
                "a53820c7b9d678b9"
            ],
            [
                "0d15bead7d26e3a0",
                "9c99de15c0c09add"
            ],
            [
                "e20c698685c971d2"
            ],
            [
                "ae8e3c29a3b2c4ee"
            ]
        ]
    },
    {
        "id": "e2b1e04db26adf3d",
        "type": "mqtt out",
        "z": "6fcc93558d7a5c77",
        "name": "",
        "topic": "CONTROL/WATER_PUMP_MOSQUITTO",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8c56dc3acab9ce1f",
        "x": 1840,
        "y": 820,
        "wires": []
    },
    {
        "id": "7d422352e1739d23",
        "type": "mqtt out",
        "z": "6fcc93558d7a5c77",
        "name": "",
        "topic": "CONTROL/DOOR_MOSQUITTO",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8c56dc3acab9ce1f",
        "x": 1820,
        "y": 760,
        "wires": []
    },
    {
        "id": "a53820c7b9d678b9",
        "type": "function",
        "z": "6fcc93558d7a5c77",
        "name": "Send Notification",
        "func": "\n// Low water temperature + flame alert + pump control\nconst temperature = Number(msg?.payload?.waterTemperature);\nconst flame = msg?.payload?.flame;\n\n// Validate temperature\nif (!Number.isFinite(temperature)) {\n    node.warn(\"Invalid or missing waterTemperature in payload\");\n    return [null, null, null]; \n}\n\n// Output 1: Temp Notification\n// Output 2: Flame Notification\n// Output 3: Door MQTT\n// Output 4: Pump MQTT\n\nlet tempNotif = null;\nlet flameNotif = null;\nlet doorMQTT = null;\nlet waterPumpMQTT = null;\n\nif (temperature < 5) {\n    tempNotif = {\n        payload: {\n            title: \"Low Water Temperature Alert\",\n            message: \"Water temperature reaching freezing (\" + temperature.toFixed(1) + \"°C)\",\n            timestamp: new Date().toISOString()\n        }\n    };\n    waterPumpMQTT = { topic: \"CONTROL/WATER_PUMP\", payload: \"ON\" };\n}\n\nif (flame === true) {\n    flameNotif = {\n        payload: {\n            title: \"Flame Alert\",\n            message: \"Flame detected near the system!\",\n            timestamp: new Date().toISOString()\n        }\n    };\n    doorMQTT = { topic: \"CONTROL/DOOR\", payload: \"ON\" };\n}\n\nreturn [tempNotif, flameNotif, doorMQTT, waterPumpMQTT];\n",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 780,
        "wires": [
            [
                "f6326688912457ec",
                "603c05f01a5c8680"
            ],
            [
                "6117872ffc1a174f"
            ],
            [
                "7d422352e1739d23"
            ],
            [
                "e2b1e04db26adf3d"
            ]
        ]
    },
    {
        "id": "61c5621e2d1d96a7",
        "type": "function",
        "z": "6fcc93558d7a5c77",
        "name": "Security Validation",
        "func": "// A simple utility to clone the message object.\n// Uses Node-RED's built-in utility if available.\nconst clone = (RED && RED.util && RED.util.cloneMessage)\n  ? RED.util.cloneMessage\n  : (o) => JSON.parse(JSON.stringify(o));\n\nconst payload = msg.payload;\n\nlet isValid = false;\nlet coercedValue;\n\n// Handle different potential input types for a boolean value.\n// We expect a boolean, but often devices send strings (\"true\", \"false\") or numbers (1, 0).\nif (typeof payload === 'boolean') {\n  isValid = true;\n  coercedValue = payload;\n} else if (typeof payload === 'string') {\n  const lowerCasePayload = payload.trim().toLowerCase();\n  if (lowerCasePayload === 'true' || lowerCasePayload === '1') {\n    isValid = true;\n    coercedValue = true;\n  } else if (lowerCasePayload === 'false' || lowerCasePayload === '0') {\n    isValid = true;\n    coercedValue = false;\n  }\n} else if (typeof payload === 'number') {\n  if (payload === 1) {\n    isValid = true;\n    coercedValue = true;\n  } else if (payload === 0) {\n    isValid = true;\n    coercedValue = false;\n  }\n}\n\n// If the validation and coercion were successful, prepare the output messages.\nif (isValid) {\n  // Output 1 → A clean, validated boolean reading\n  const outValidReading = clone(msg);\n  outValidReading.topic = \"valid_reading\";\n  outValidReading.payload = coercedValue;\n  outValidReading.validation = { ok: true, at: new Date().toISOString(), schema: \"pir:v1\" };\n\n  // Return the single valid message. The second output will be null.\n  return [outValidReading, null];\n} else {\n  // If validation fails, create and return an error message.\n  const errMsg = {\n    topic: \"validation_error\",\n    payload: {\n      originalData: payload,\n      error: `Invalid PIR sensor reading: expected a boolean, \"true\"/\"false\", 1/0.`,\n      receivedType: typeof payload,\n      timestamp: new Date().toISOString()\n    }\n  };\n  node.warn(errMsg.payload.error);\n\n  // Return the error message. The first output will be null.\n  return [null, errMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 920,
        "wires": [
            [
                "b02149ab14b3fa6a",
                "b161d9596593e833"
            ],
            [
                "0d15bead7d26e3a0",
                "9c99de15c0c09add"
            ]
        ]
    },
    {
        "id": "dfd62f96a85b1075",
        "type": "debug",
        "z": "6fcc93558d7a5c77",
        "name": "Security JS Object",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 980,
        "wires": []
    },
    {
        "id": "b161d9596593e833",
        "type": "function",
        "z": "6fcc93558d7a5c77",
        "name": "Send Notification",
        "func": "const payload = msg.payload;\n\n// Check if the payload is a valid boolean for motion detection.\nif (typeof payload === 'boolean' && payload === true) {\n    // If motion is detected, create a notification message.\n    const notification = {\n        payload: {\n            title: \"Security Alert: Motion Detected\",\n            message: \"movement presence detected by PIR sensor!\",\n            timestamp: new Date().toISOString()\n        }\n    };\n    \n    // Return the notification message.\n    return [notification];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 1080,
        "wires": [
            [
                "d03b9f6632f06b1f",
                "c28bf8a065340bdd"
            ]
        ]
    },
    {
        "id": "d03b9f6632f06b1f",
        "type": "debug",
        "z": "6fcc93558d7a5c77",
        "name": "Security Node Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 1080,
        "wires": []
    },
    {
        "id": "6117872ffc1a174f",
        "type": "http request",
        "z": "6fcc93558d7a5c77",
        "name": "Temperature Notification Endpoint",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:8000/notifications/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "603c05f01a5c8680",
        "type": "http request",
        "z": "6fcc93558d7a5c77",
        "name": "Flame Notification Endpoint",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:8000",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1800,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "f0e96cbd99c21ce5",
        "type": "inject",
        "z": "6fcc93558d7a5c77",
        "name": "Notification Test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"title\":\"Test Notification\",\"message\":\"This is a test from Node-RED\",\"timestamp\":\"2025-08-22T19:30:00Z\"}",
        "payloadType": "json",
        "x": 1480,
        "y": 580,
        "wires": [
            [
                "6117872ffc1a174f",
                "9921aa515f49eb8a"
            ]
        ]
    },
    {
        "id": "9921aa515f49eb8a",
        "type": "debug",
        "z": "6fcc93558d7a5c77",
        "name": "Notification Test Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 640,
        "wires": []
    },
    {
        "id": "c28bf8a065340bdd",
        "type": "http request",
        "z": "6fcc93558d7a5c77",
        "name": "PIR Notification Endpoint",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:8000/notifications/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1790,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "5aa1fc542901829d",
        "type": "debug",
        "z": "6fcc93558d7a5c77",
        "name": "EMQX WATER PUMP DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 280,
        "wires": []
    },
    {
        "id": "3499fb5ff280ddd7",
        "type": "debug",
        "z": "6fcc93558d7a5c77",
        "name": "EMQX LIGHT CONTROL DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 220,
        "wires": []
    },
    {
        "id": "84082cf87c4b2ed6",
        "type": "debug",
        "z": "6fcc93558d7a5c77",
        "name": "EMQX FAN CONTROL  DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 580,
        "wires": []
    },
    {
        "id": "835c70ebb6371952",
        "type": "debug",
        "z": "6fcc93558d7a5c77",
        "name": "EMQX DOOR CONTROL DEBUG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 640,
        "wires": []
    },
    {
        "id": "7f2c4a414ceafded",
        "type": "mqtt in",
        "z": "6fcc93558d7a5c77",
        "name": "",
        "topic": "HOME_DATA_MOSQUITTO",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "8c56dc3acab9ce1f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 620,
        "y": 840,
        "wires": [
            [
                "a540e0a1349dadf7"
            ]
        ]
    },
    {
        "id": "477d5b2fc42c90c2",
        "type": "inject",
        "z": "6fcc93558d7a5c77",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 880,
        "y": 780,
        "wires": [
            [
                "16f229859378c5a5"
            ]
        ]
    },
    {
        "id": "d554261bb421c00a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.emqx.io",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8c56dc3acab9ce1f",
        "type": "mqtt-broker",
        "name": "Mosquitto",
        "broker": "localhost",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5d6e265c0611969a",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB Cloud",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://us-east-1-1.aws.cloud2.influxdata.com/",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "077575e3997c1f4c",
        "type": "global-config",
        "env": [],
        "modules": {
            "node-red-node-cbor": "1.0.2",
            "node-red-contrib-influxdb": "0.7.0"
        }
    }
]